/*
Copyright (c) 2013, Intel Corporation

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
      this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright notice,
      this list of conditions and the following disclaimer in the documentation
      and/or other materials provided with the distribution.
    * Neither the name of Intel Corporation nor the names of its contributors
      may be used to endorse or promote products derived from this software
      without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

// LLVM IR xtext module
// 
// Main features:
// * Syntactical and semantical code highlighting.
// * Cross-reference awareness.
// * Nameless element name inferring.
// 
// LLVM IR limitations:
// * Cannot refer to unnamed future elements.
// 
// Bugs:
// * Locals (%) that contain a dot in their name appear with interpunct in some windows, a result
//   of a workaround since a bug prevents these locals from being normally referred to.
// * Inserting or removing unnamed elements does not properly rename unnamed elements in the
//   rest of the file immediately.
// * Hangs on content-assist in a function definition header.
// * Hangs on unclosed functions.
// * Hangs on content-assist in last ref of a function
// * (unverified) "Go to definition" and occurrences highlighting only work if the file actually belongs to a project.
// * (harmless) content-assist generates error in Eclipse log (https://bugs.eclipse.org/bugs/show_bug.cgi?id=390173)
// 
// Future feature ideas:
// * Adding type verification.
// * Validating anonymous variables (%num) number sequence.
// * Expanding references on hover.
// * Revising how metadata works.
// * Inferring possible incoming basic blocks for each basic block and show them on hover,
//   or even as warning for incomplete phi nodes.
// * Verifying whether a file is a valid SPIR file.
// * Integrating with the compiler for immediate feedback.

grammar com.intel.llvm.ireditor.LLVM_IR hidden(WS, FILECHECK_COMMENT, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate lLVM_IR "http://www.intel.com/llvm/ireditor"

Model:
	elements+=TopLevelElement*
;

TopLevelElement:
	TypeDef | InlineAsm | TargetInfo | GlobalValue | NamedMetadata
;

NamedMetadata:
	name=META_INT '=' 'metadata' node=MetadataNode |
	name=META_NAME '=' node=MetadataNode
;

MetadataRef:
	ref=[NamedMetadata|MetadataIdentifier]
;

MetadataIdentifier:
	META_INT | META_NAME
;

ValueRef:
	GlobalValueRef |
	LocalValueRef
;

GlobalValueRef:
	ref=[GlobalValueDef|GLOBAL_ID] |
	intrinsic=INSTRINSIC |
	constant=Constant |
	metadata=MetadataRef
;

FunctionRef:
	intrinsic=INSTRINSIC | ref=[FunctionHeader|GLOBAL_ID]
;

LocalValueRef:
	ref=[LocalValue|LOCAL_ID]
;

GlobalValue:
	GlobalVariable | Function | Alias
;

GlobalValueDef:
	GlobalVariable | FunctionHeader | Alias
;

LocalValue:
	NamedInstruction | Parameter
;

NamedInstruction:
	StartingInstruction |
	NamedMiddleInstruction |
	NamedTerminatorInstruction
;

Instruction:
	StartingInstruction |
	MiddleInstruction |
	TerminatorInstruction
;

Alias:
	name=GlobalName
	'alias'
	linkage=Linkage?
	visibility=Visibility?
	type=Type
	ref=GlobalValueRef
;

TargetInfo:
	'target' infoType=('datalayout' | 'triple') '=' layout=STRING
;

InlineAsm:
	'module' 'asm' asmLine=STRING
;

GlobalVariable:
	name=GlobalName
	linkage=Linkage?
	addrspace=AddressSpace?
	tlsModel=TLSmodel?
	'unnamed_addr'?
	('constant' | 'global')
	type=Type
	(initialValue=Constant)?
	(',' section=Section)?
	(',' align=Align)?
;

Constant:
	SimpleConstant |
	StructureConstant |
	ArrayConstant |
	VectorConstant |
	ZeroInitializer |
	MetadataNode |
	MetadataString |
	BlockAddress |
	Undef |
	ConstantExpression
;

ConstantExpression:
	ConstantExpression_convert |
	ConstantExpression_getelementptr |
	ConstantExpression_select |
	ConstantExpression_compare |
	ConstantExpression_extractelement |
	ConstantExpression_insertelement |
	ConstantExpression_shufflevector |
	ConstantExpression_extractvalue |
	ConstantExpression_insertvalue |
	ConstantExpression_binary
;

ConstantExpression_convert:
	opcode=ConvertionOpcode '(' fromType=Type constant=GlobalValueRef 'to' targetType=Type ')'
;

ConstantExpression_getelementptr:
	opcode='getelementptr' 'inbounds'?
	'(' constantType=Type constant=GlobalValueRef (',' indexTypes+=Type indices+=Constant)* ')'
;

ConstantExpression_select:
	opcode='select' '(' condition=TypedValue ',' op1=TypedValue ',' op2=TypedValue ')'
;

ConstantExpression_compare:
	(opcode='icmp' condition=IcmpCondition | opcode='fcmp' condition=FcmpCondition)
	'(' op1=TypedValue ',' op2=TypedValue ')'
;

ConstantExpression_extractelement:
	opcode='extractelement' '(' vector=TypedValue ',' index=TypedValue ')'
;

ConstantExpression_insertelement:
	opcode='insertelement' '(' vectorType=VectorType vector=ValueRef
	',' element=TypedValue
	',' index=TypedValue ')'
;

ConstantExpression_shufflevector:
	opcode='shufflevector' '('
	vector1=TypedValue ','
	vector2=TypedValue ','
	mask=TypedValue ')'
;

ConstantExpression_extractvalue:
	opcode='extractvalue' '(' value=TypedValue (',' indices+=INTEGER)+ ')'
;

ConstantExpression_insertvalue:
	opcode='insertvalue' '(' value=TypedValue
	',' element=TypedValue
	(',' indices+=INTEGER)+ ')'
;

ConstantExpression_binary:
	opcode=(
		// Binary:
		'add' | 'fadd' |
		'sub' | 'fsub' |
		'mul' | 'fmul' |
		'udiv' | 'sdiv' | 'fdiv' |
		'urem' | 'srem' | 'frem' |
		// Bitwise binary:
		'shl' | 'lshr' | 'ashr' | 'and' | 'or' | 'xor'
	)
	'(' op1=TypedValue ',' op2=TypedValue ')'
;

Undef:
	'undef' {Undef}
;

BlockAddress:
	'blockaddress' '(' function=FunctionRef ',' basicBlock=BasicBlockRef ')'
;

ZeroInitializer:
	'zeroinitializer' {ZeroInitializer}
;

StructureConstant:
	{StructureConstant}
	'{' list=ConstantList? '}'
;

ArrayConstant:
	{ArrayConstant}
	'[' list=ConstantList? ']'
;

VectorConstant:
	{VectorConstant}
	'<' list=ConstantList? '>'
;

ConstantList:
	typedConstants+=TypedConstant (',' typedConstants+=TypedConstant)*
	//types+=Type constants+=Constant (',' types+=Type constants+=Constant)*
;

TypedConstant:
	type=Type value=Constant
;

SimpleConstant:
	(INTEGER | SIGNED_INT | FLOAT | BOOLEAN | NULL | CSTRING) {SimpleConstant}
;

MetadataNode:
	{MetadataNode}
	'!' '{' (elements+=MetadataNodeElement (',' elements+=MetadataNodeElement)*)? '}'
;

MetadataNodeElement:
	(value=TypedValue) | (metadataRef=MetadataRef) | null=NULL
;

MetadataString:
	name=METADATA_STRING
;

TLSmodel:
	'thread_local' '(' TLSoption ')'
;

TLSoption:
	'localdynamic' |
	'initialexec' |
	'localexec'
;

AddressSpace:
	'addrspace' '(' value=INTEGER ')'
;

Section:
	'section' STRING
;

Align:
	'align' INTEGER
;

Function:
	FunctionDef | FunctionDecl
;

FunctionDef:
	'define' header=FunctionHeader body=FunctionBody
;

FunctionDecl:
	'declare' header=FunctionHeader
;

FunctionHeader:
	linkage=Linkage?
	visibility=Visibility?
	cconv=CConv?
	'unnamed_addr'?
	rettype=ParameterType
	name=(GLOBAL_ID | INSTRINSIC)
	'(' (
		(parameters+=Parameter (',' parameters+=Parameter)* (',' '...')?)? |
		'...'
	) ')'
	attrs=FunctionAttributes?
;

FunctionBody:
	'{'
		basicBlocks+=BasicBlock+
	'}'
;

FunctionAttributes:
	attributes+=FunctionAttribute+
;

FunctionAttribute:
	'address_safety' |
	('alignstack(' '<' INTEGER '>' ')') |
	'alwaysinline' |
	'nonlazybind' |
	'inlinehint' |
	'naked' |
	'noimplicitfloat' |
	'noinline' |
	'noredzone' |
	'noreturn' |
	'nounwind' |
	'optsize' |
	'readnone' |
	'readonly' |
	'returns_twice' |
	'ssp' |
	'sspreq' |
	'uwtable' |
	('gc' STRING)
;

BasicBlock:
	name=BasicBlockName
	instructions+=StartingInstruction*
	instructions+=MiddleInstruction*
	instructions+=TerminatorInstruction
;

BasicBlockName returns ecore::EString:
	// A value converter translates this into either %num (if this isn't provided)
	// or into %NAME if it is.
	BASIC_BLOCK_ID?
;

MetadataSuffix:
	',' name=META_NAME value=MetadataRef
;

StartingInstruction:
	name=LocalName
	instruction=Instruction_phi
	metadata+=MetadataSuffix*
;

MiddleInstruction:
	instruction=(
		NamedMiddleInstruction |
		Instruction_store |
		Instruction_fence |
		Instruction_cmpxchg |
		Instruction_atomicrmw |
		Instruction_call_void
	)
	metadata+=MetadataSuffix*
;

NamedMiddleInstruction:
	name=LocalName
	instruction=(
		BinaryInstruction |
		BitwiseBinaryInstruction |
		VectorInstructions |
		AggregateInstruction |
		Instruction_alloca |
		Instruction_load |
		Instruction_getelementptr |
		ConversionInstruction |
		OtherInstruction |
		Instruction_call_nonVoid
	)
;

LocalName returns ecore::EString:
	// A value converter translates this into either %num (if this isn't provided)
	// or into %NAME if it is.
	(LOCAL_ID WS* '=')?
;

GlobalName returns ecore::EString:
	// A value converter translates this into either %num (if this isn't provided)
	// or into %NAME if it is.
	(GLOBAL_ID WS* '=')?
;

TerminatorInstruction:
	instruction=(
		NamedTerminatorInstruction |
		Instruction_ret |
		Instruction_br |
		Instruction_switch |
		Instruction_indirectbr |
		Instruction_resume |
		Instruction_unreachable |
		Instruction_invoke_void
	)
	metadata+=MetadataSuffix*
;

NamedTerminatorInstruction:
	name=LocalName
	instruction=(
		Instruction_invoke_nonVoid
	)
;

// ret <type> <value>       ; Return a value from a non-void function
// ret void                 ; Return from void function
Instruction_ret:
	opcode='ret' (val=TypedValue | 'void')
;

// br i1 <cond>, label <iftrue>, label <iffalse>
// br label <dest>          ; Unconditional branch
Instruction_br:
	opcode='br' (
		(condition=TypedValue ',' 'label' true=BasicBlockRef ',' 'label' false=BasicBlockRef) |
		('label' unconditional=BasicBlockRef)
	)
;

// switch <intty> <value>, label <defaultdest> [ <intty> <val>, label <dest> ... ]
Instruction_switch:
	opcode='switch' comparisonValue=TypedValue
	',' 'label' defaultDest=BasicBlockRef
	'['
	(caseConditions+=TypedValue ',' 'label' destinations+=BasicBlockRef)*
	']'
;

// indirectbr <somety>* <address>, [ label <dest1>, label <dest2>, ... ]
Instruction_indirectbr:
	opcode='indirectbr' address=TypedValue ','
	'['
	('label' destinations+=BasicBlockRef (',' 'label' destinations+=BasicBlockRef)*)?
	']'
;

// <result> = invoke [cconv] [ret attrs] <ptr to function ty> <function ptr val>(<function args>) [fn attrs]
//                 to label <normal label> unwind label <exception label>
// Notice this template as it appears in the reference is incorrect, <ptr to function ty> is actually
// the function return type, just like with the call instruction.
Instruction_invoke_void:
	opcode='invoke' cconv=CConv?
	('zeroext'? & 'signext'? & 'inreg'?)
	rettype=VoidType
	callee=Callee
	args=ArgList
	attributes=FunctionAttributes?
	'to' 'label' toLabel=BasicBlockRef 'unwind' 'label' exceptionLabel=BasicBlockRef
;

// <result> = invoke [cconv] [ret attrs] <ptr to function ty> <function ptr val>(<function args>) [fn attrs]
//                 to label <normal label> unwind label <exception label>
Instruction_invoke_nonVoid:
	opcode='invoke' cconv=CConv?
	('zeroext'? & 'signext'? & 'inreg'?)
	rettype=NonVoidType
	callee=Callee
	args=ArgList
	attributes=FunctionAttributes?
	'to' 'label' toLabel=BasicBlockRef 'unwind' 'label' exceptionLabel=BasicBlockRef
;

// resume <type> <value>
Instruction_resume:
	opcode='resume' value=TypedValue
;

// unreachable
Instruction_unreachable:
	opcode='unreachable'
;

BasicBlockRef:
	ref=[BasicBlock|LOCAL_ID]
;

BinaryInstruction:
	Instruction_add |
	Instruction_fadd |
	Instruction_sub |
	Instruction_fsub |
	Instruction_mul |
	Instruction_fmul |
	Instruction_udiv |
	Instruction_sdiv |
	Instruction_fdiv |
	Instruction_urem |
	Instruction_srem |
	Instruction_frem
;

// <result> = add <ty> <op1>, <op2>          ; yields {ty}:result
// <result> = add nuw <ty> <op1>, <op2>      ; yields {ty}:result
// <result> = add nsw <ty> <op1>, <op2>      ; yields {ty}:result
// <result> = add nuw nsw <ty> <op1>, <op2>  ; yields {ty}:result
Instruction_add:
	opcode='add' ('nuw'? & 'nsw'?) type=Type op1=ValueRef ',' op2=ValueRef
;

// <result> = fadd <ty> <op1>, <op2>   ; yields {ty}:result
Instruction_fadd:
	opcode='fadd' type=Type op1=ValueRef ',' op2=ValueRef
;

// <result> = sub <ty> <op1>, <op2>          ; yields {ty}:result
// <result> = sub nuw <ty> <op1>, <op2>      ; yields {ty}:result
// <result> = sub nsw <ty> <op1>, <op2>      ; yields {ty}:result
// <result> = sub nuw nsw <ty> <op1>, <op2>  ; yields {ty}:result
Instruction_sub:
	opcode='sub' ('nuw'? & 'nsw'?) type=Type op1=ValueRef ',' op2=ValueRef
;

// <result> = fsub <ty> <op1>, <op2>   ; yields {ty}:result
Instruction_fsub:
	opcode='fsub' type=Type op1=ValueRef ',' op2=ValueRef
;

// <result> = mul <ty> <op1>, <op2>          ; yields {ty}:result
// <result> = mul nuw <ty> <op1>, <op2>      ; yields {ty}:result
// <result> = mul nsw <ty> <op1>, <op2>      ; yields {ty}:result
// <result> = mul nuw nsw <ty> <op1>, <op2>  ; yields {ty}:result
Instruction_mul:
	opcode='mul' ('nuw'? & 'nsw'?) type=Type op1=ValueRef ',' op2=ValueRef
;

// <result> = fmul <ty> <op1>, <op2>   ; yields {ty}:result
Instruction_fmul:
	opcode='fmul' type=Type op1=ValueRef ',' op2=ValueRef
;

// <result> = udiv <ty> <op1>, <op2>         ; yields {ty}:result
// <result> = udiv exact <ty> <op1>, <op2>   ; yields {ty}:result
Instruction_udiv:
	opcode='udiv' 'exact'? type=Type op1=ValueRef ',' op2=ValueRef
;

// <result> = sdiv <ty> <op1>, <op2>         ; yields {ty}:result
// <result> = sdiv exact <ty> <op1>, <op2>   ; yields {ty}:result
Instruction_sdiv:
	opcode='sdiv' 'exact'? type=Type op1=ValueRef ',' op2=ValueRef
;

// <result> = fdiv <ty> <op1>, <op2>   ; yields {ty}:result
Instruction_fdiv:
	opcode='fdiv' type=Type op1=ValueRef ',' op2=ValueRef
;

// <result> = urem <ty> <op1>, <op2>   ; yields {ty}:result
Instruction_urem:
	opcode='urem' type=Type op1=ValueRef ',' op2=ValueRef
;

// <result> = srem <ty> <op1>, <op2>   ; yields {ty}:result
Instruction_srem:
	opcode='srem' type=Type op1=ValueRef ',' op2=ValueRef
;

// <result> = frem <ty> <op1>, <op2>   ; yields {ty}:result
Instruction_frem:
	opcode='frem' type=Type op1=ValueRef ',' op2=ValueRef
;

BitwiseBinaryInstruction:
	Instruction_shl |
	Instruction_lshr |
	Instruction_ashr |
	Instruction_and |
	Instruction_or |
	Instruction_xor
;

// <result> = shl <ty> <op1>, <op2>           ; yields {ty}:result
// <result> = shl nuw <ty> <op1>, <op2>       ; yields {ty}:result
// <result> = shl nsw <ty> <op1>, <op2>       ; yields {ty}:result
// <result> = shl nuw nsw <ty> <op1>, <op2>   ; yields {ty}:result
Instruction_shl:
	opcode='shl' ('nuw'? & 'nsw'?) type=Type op1=ValueRef ',' op2=ValueRef
;

// <result> = lshr <ty> <op1>, <op2>         ; yields {ty}:result
// <result> = lshr exact <ty> <op1>, <op2>   ; yields {ty}:result
Instruction_lshr:
	opcode='lshr' 'exact'? type=Type op1=ValueRef ',' op2=ValueRef
;

// <result> = ashr <ty> <op1>, <op2>         ; yields {ty}:result
// <result> = ashr exact <ty> <op1>, <op2>   ; yields {ty}:result
Instruction_ashr:
	opcode='ashr' 'exact'? type=Type op1=ValueRef ',' op2=ValueRef
;

// <result> = and <ty> <op1>, <op2>   ; yields {ty}:result
Instruction_and:
	opcode='and' type=Type op1=ValueRef ',' op2=ValueRef
;

// <result> = or <ty> <op1>, <op2>   ; yields {ty}:result
Instruction_or:
	opcode='or' type=Type op1=ValueRef ',' op2=ValueRef
;

// <result> = xor <ty> <op1>, <op2>   ; yields {ty}:result
Instruction_xor:
	opcode='xor' type=Type op1=ValueRef ',' op2=ValueRef
;

VectorInstructions:
	Instruction_extractelement |
	Instruction_insertelement |
	Instruction_shufflevector
;

// <result> = extractelement <n x <ty>> <val>, i32 <idx>    ; yields <ty>
Instruction_extractelement:
	opcode='extractelement' vector=TypedValue ',' index=TypedValue
;

// <result> = insertelement <n x <ty>> <val>, <ty> <elt>, i32 <idx>    ; yields <n x <ty>>
Instruction_insertelement:
	opcode='insertelement' vector=TypedValue
	',' element=TypedValue
	',' index=TypedValue
;

// <result> = shufflevector <n x <ty>> <v1>, <n x <ty>> <v2>, <m x i32> <mask>    ; yields <m x <ty>>
Instruction_shufflevector:
	opcode='shufflevector'
	vector1=TypedValue ','
	vector2=TypedValue ','
	mask=TypedValue
;

AggregateInstruction:
	Instruction_extractvalue |
	Instruction_insertvalue
;

// <result> = extractvalue <aggregate type> <val>, <idx>{, <idx>}*
Instruction_extractvalue:
	opcode='extractvalue' aggregate=TypedValue (',' indices+=INTEGER)+
;

// <result> = insertvalue <aggregate type> <val>, <ty> <elt>, <idx>{, <idx>}*    ; yields <aggregate type>
Instruction_insertvalue:
	opcode='insertvalue' aggregate=TypedValue
	',' element=TypedValue
	(',' indices+=INTEGER)+
;

MemoryInstruction:
	Instruction_alloca |
	Instruction_load |
	Instruction_store |
	Instruction_fence |
	Instruction_cmpxchg |
	Instruction_atomicrmw |
	Instruction_getelementptr
;

// <result> = alloca <type>[, <ty> <NumElements>][, align <alignment>]     ; yields {type*}:result
Instruction_alloca:
	opcode='alloca' type=Type
	(',' numElements=TypedValue)?
	(',' alignment=Align)?
;

// <result> = load [volatile] <ty>* <pointer>[, align <alignment>][, !nontemporal !<index>][, !invariant.load !<index>]
// <result> = load atomic [volatile] <ty>* <pointer> [singlethread] <ordering>, align <alignment>
// !<index> = !{ i32 1 }
Instruction_load:
	opcode='load'
	(
		(
			'volatile'? pointer=TypedValue
			(',' alignment=Align)?
			(',' '!nontemporal' nontemporalIndex=MetadataRef)?
			(',' '!invariant.load' invariantLoadIndex=MetadataRef)?
		) | 
		(
			'atomic' 'volatile'? pointer=TypedValue
			'singlethread'?
			ordering=Ordering
			alignment=Align
		)
	)
;

// store [volatile] <ty> <value>, <ty>* <pointer>[, align <alignment>][, !nontemporal !<index>]        ; yields {void}
// store atomic [volatile] <ty> <value>, <ty>* <pointer> [singlethread] <ordering>, align <alignment>  ; yields {void}
Instruction_store:
	opcode='store' 
	(
		(
			'volatile'?
			value=TypedValue
			',' pointer=TypedValue
			(',' alignment=Align)?
			(',' '!nontemporal' nontemporalIndex=MetadataRef)?
		) | 
		(
			'atomic' 'volatile'?
			value=TypedValue
			pointer=TypedValue
			'singlethread'?
			ordering=Ordering
			alignment=Align
		)
	)
;

// fence [singlethread] <ordering>                   ; yields {void}
Instruction_fence:
	opcode='fence' 'singlethread'? ordering=Ordering
;

// cmpxchg [volatile] <ty>* <pointer>, <ty> <cmp>, <ty> <new> [singlethread] <ordering>  ; yields {ty}
Instruction_cmpxchg:
	opcode='cmpxchg' 'volatile'? pointer=TypedValue
	',' comparedWith=TypedValue
	',' newValue=TypedValue
	'singlethread'? ordering=Ordering
;

// atomicrmw [volatile] <operation> <ty>* <pointer>, <ty> <value> [singlethread] <ordering>
//                   ; yields {ty}
Instruction_atomicrmw:
	opcode='atomicrmw' 'volatile'? operation=Atomicrmw_operation
	pointer=TypedValue
	',' argument=TypedValue 'singlethread'? ordering=Ordering
;

Atomicrmw_operation:
	'xchg' | 'add' | 'sub' | 'and' | 'nand' |
	'or' | 'xor' | 'max' | 'min' | 'umax' | 'umin'
;

// <result> = getelementptr <pty>* <ptrval>{, <ty> <idx>}*
// <result> = getelementptr inbounds <pty>* <ptrval>{, <ty> <idx>}*
// <result> = getelementptr <ptr vector> ptrval, <vector index type> idx 
Instruction_getelementptr:
	opcode='getelementptr' 'inbounds'?
	pointer=TypedValue
	(',' indices+=TypedValue)*
;

ConversionInstruction:
	// Merged since they all look exactly the same except the opcode
	opcode=ConvertionOpcode
	fromType=Type value=ValueRef 'to' targetType=Type
;

ConvertionOpcode:
	'trunc' | 'zext' | 'sext' |
	'fptrunc' | 'fpext' | 'fptoui' | 'fptosi' | 'uitofp' | 'sitofp' |
	'ptrtoint' | 'inttoptr' |
	'bitcast'
;

OtherInstruction:
	Instruction_icmp |
	Instruction_fcmp |
	Instruction_select |
	Instruction_va_arg |
	Instruction_landingpad
;

// <result> = icmp <cond> <ty> <op1>, <op2>   ; yields {i1} or {<N x i1>}:result
Instruction_icmp:
	opcode='icmp' condition=IcmpCondition type=Type op1=ValueRef ',' op2=ValueRef
;

IcmpCondition:
	'eq' | 'ne' |
	'ugt' | 'uge' | 'ult' | 'ule' |
	'sgt' | 'sge' | 'slt' | 'sle'
;

// <result> = fcmp <cond> <ty> <op1>, <op2>     ; yields {i1} or {<N x i1>}:result
Instruction_fcmp:
	opcode='fcmp' condition=FcmpCondition type=Type op1=ValueRef ',' op2=ValueRef
;

FcmpCondition:
	BOOLEAN |
	'oeq' | 'ogt' | 'oge' | 'olt' | 'ole' | 'one' | 'ord' |
	'ueq' | 'ugt' | 'uge' | 'ult' | 'ule' | 'une' | 'uno'
;

// <result> = phi <ty> [ <val0>, <label0>], ...
Instruction_phi:
	opcode='phi' type=Type
	('[' values+=ValueRef ',' labels+=BasicBlockRef ']')
	(',' '[' values+=ValueRef ',' labels+=BasicBlockRef ']')*
;

// <result> = select selty <cond>, <ty> <val1>, <ty> <val2>             ; yields ty
// selty is either i1 or {<N x i1>}
Instruction_select:
	opcode='select' condition=TypedValue
	',' value1=TypedValue
	',' value2=TypedValue
;

// <result> = [tail] call [cconv] [ret attrs] <ty> [<fnty>*] <fnptrval>(<function args>) [fn attrs]
Instruction_call_nonVoid:
	isTail?='tail'?
	opcode='call'
	cconv=CConv?
	returnAttributes=ParameterAttributes?
	returnType=NonVoidType
	// Need a syntactic predicate here, I believe because it cannot tell in advance if '(' is
	// opening the argument list or if it's part of a type.
	(=>functionPointerType=Type)?
	callee=Callee
	args=ArgList
	functionAttributes=FunctionAttributes?
;

Instruction_call_void:
	isTail?='tail'?
	opcode='call'
	cconv=CConv?
	returnAttributes=ParameterAttributes?
	returnType=VoidType
	// Need a syntactic predicate here, I believe because it cannot tell in advance if '(' is
	// opening the argument list or if it's part of a type.
	(=>functionPointerType=Type)?
	callee=Callee
	args=ArgList
	functionAttributes=FunctionAttributes?
;

ArgList:
	{ArgList}
	'(' (arguments+=Argument (',' arguments+=Argument)* )? ')'
;

Callee:
	ValueRef | InlineAssembler
;

InlineAssembler:
	'asm' 'sideeffect'? 'alignstack'? assembler=STRING ',' flags=STRING
;


// <resultval> = va_arg <va_list*> <arglist>, <argty>
Instruction_va_arg:
	opcode='va_arg' arglist=TypedValue ',' type=Type
;

// <resultval> = landingpad <resultty> personality <type> <pers_fn> <clause>+
// <resultval> = landingpad <resultty> personality <type> <pers_fn> cleanup <clause>*
// <clause> := catch <type> <value>
// <clause> := filter <array constant type> <array constant>
Instruction_landingpad:
	opcode='landingpad' resultType=Type 'personality' personalityType=Type
	personalityFunction=FunctionRef
	(clauses+=LandingpadClause | 'cleanup')
	clauses+=LandingpadClause*
;

LandingpadClause:
	landingPadType='catch' catchType=TypedValue |
	landingPadType='filter' arrayType=ArrayType arrayConstant=ArrayConstant
;

Ordering:
	'unordered' | 'monotonic' | 'acquire' | 'release' | 'acq_rel' | 'seq_cst'
;

TypedValue:
	type=Type ref=ValueRef
;

ParameterType:
	type=Type attrs=ParameterAttributes?
;

ParameterAttributes:
	attributes+=ParameterAttribute+
;

ParameterAttribute:
	'zeroext' | 'signext' | 'inreg' | 'byval' | 'sret' | 'noalias' | 'nocapture' | 'nest'
;

Argument:
	type=ParameterType ref=ValueRef
;

Parameter:
	type=ParameterType name=LOCAL_ID?
;

NonVoidType:
	// A function which returns void, or a pointer to such a function.
	baseType=VoidType
	functionSuffix=FunctionTypeOrPointerToFunctionTypeSuffix
	|
	// A non-void single type, or a pointer to such a type, or a function which returns
	// such a type or a pointer to such a type, or a pointer to such a function. In short,
	// All type options not covered by the previous alternative, but not including "void",
	// which is the only type not allowed.
	baseType=NonLeftRecursiveNonVoidType
	stars+=Star*
	functionSuffix=FunctionTypeOrPointerToFunctionTypeSuffix?
;

Star:
	{Star}
	addressSpace=AddressSpace? '*'
;

Type:
	baseType=NonLeftRecursiveType
	// Pointers or functions:
	stars+=Star*
	functionSuffix=FunctionTypeOrPointerToFunctionTypeSuffix?
;

FunctionTypeOrPointerToFunctionTypeSuffix:
	// Basically the entire function type, not including the return type.
	{FunctionTypeOrPointerToFunctionTypeSuffix}
	'(' (
		(containedTypes+=ParameterType (',' containedTypes+=ParameterType)* (',' vararg='...')?)? |
		vararg='...'
	)')'
	stars+=Star*
;

NonLeftRecursiveType:
	// Complete types:
	(type=(
		IntType |
		FloatingType |
		VectorType |
		ArrayType |
		X86mmxType |
		VoidType |
		MetadataType |
		StructType |
		OpaqueType
	) |
	typedef=[TypeDef|LOCAL_ID])
;

NonLeftRecursiveNonVoidType:
	// Complete types:
	type=(
		IntType |
		FloatingType |
		VectorType |
		ArrayType |
		X86mmxType |
		MetadataType |
		StructType |
		OpaqueType
	)
;

TypeDef:
	name=LocalName 'type' type=NonVoidType
;

BinaryOpcode:
	'mov' | 'add' | 'sub'
;

IntType:
	INT_TYPE {IntType}
;

OpaqueType:
	'opaque' {OpaqueType}
;

StructType:
	{StructType}
	(
		'{' (types+=Type (',' types+=Type)*)? '}' |
		packed='<' '{' (types+=Type (',' types+=Type)*)? '}' '>'
	)
;

VectorType:
	'<' size=INTEGER 'x' elemType=Type '>'
;

ArrayType:
	'[' size=INTEGER 'x' elemType=Type ']'
;

X86mmxType:
	'x86_mmx' {X86mmxType}
;

VoidType:
	'void' {VoidType}
;

MetadataType:
	'metadata' {MetadataType}
;

FloatingType:
	('half' | 'float' | 'double' | 'fp128' | 'x86_fp80' | 'ppc_fp128') {FloatingType}
;

Linkage:
	'private' |
	'linker_private' |
	'linker_private_weak' |
	'linker_private_weak_def_auto' |
	'internal' |
	'available_externally' |
	'linkonce' |
	'weak' |
	'common' |
	'appending' |
	'extern_weak' |
	'linkonce_odr' |
	'weak_odr' |
	'external' |
	'dllimport' |
	'dllexport'
;

CConv:
	'ccc' |
	'fastcc' |
	'coldcc' |
	'cc 10' |
	'cc' INTEGER
;

Visibility:
	'default' |
	'hidden' |
	'protected'
;

terminal BOOLEAN:
	'true' | 'false'
;

terminal NULL:
	'null'
;

terminal INT_TYPE:
	'i' INTEGER
;

terminal INSTRINSIC:
	'@llvm.' NAME
;

terminal GLOBAL_ID:
	'@' (INTEGER | NAME | STRING)
;

terminal LOCAL_ID:
	'%' (INTEGER | NAME | STRING)
;

terminal BASIC_BLOCK_ID:
	(INTEGER | NAME | STRING) ':'
;

terminal META_INT:
	'!' INTEGER
;

terminal META_NAME:
	'!' NAME
;

terminal INTEGER:
	('0'..'9')+
;

terminal SIGNED_INT:
	('+' | '-') INTEGER
;

terminal fragment NAME:
	('a'..'z'|'A'..'Z'|'$'|'.'|'_'|'-') ('a'..'z'|'A'..'Z'|'$'|'.'|'_'|'0'..'9'|'-')*
;

terminal CSTRING:
	'c' STRING
;

terminal STRING: 
	'"' ( '\\' (('a'..'f' | 'A'..'F' | '0'..'9') ('a'..'f' | 'A'..'F' | '0'..'9')) | !('\\'|'"') )* '"'
	//'"' -> '"'
;

terminal METADATA_STRING:
	'!' STRING
;

terminal FLOAT:
	(SIGNED_INT | INTEGER) '.' INTEGER ('e' (SIGNED_INT | INTEGER))?
	| '0x' ('K' | 'L' | 'M' | 'H')? ('a'..'f' | 'A'..'F' | '0'..'9')+
;

terminal FILECHECK_COMMENT:
	'; ' ('A'..'Z' | '_' | '-')+ ': ' !('\n'|'\r')* ('\r'? '\n')?
;

terminal SL_COMMENT:
	';' !('\n'|'\r')* ('\r'? '\n')?
;

terminal WS			: (' '|'\t'|'\r'|'\n')+;

terminal ANY_OTHER: .;
